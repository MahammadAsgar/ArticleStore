// <auto-generated />
using System;
using ArticleStore.Application.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArticleStore.Application.Migrations
{
    [DbContext(typeof(ArticleStoreDbContext))]
    [Migration("20230925182554_AppUserFix02")]
    partial class AppUserFix02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppUserAppUser", b =>
                {
                    b.Property<int>("FollowersId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingsId")
                        .HasColumnType("int");

                    b.HasKey("FollowersId", "FollowingsId");

                    b.HasIndex("FollowingsId");

                    b.ToTable("AppUserAppUser");
                });

            modelBuilder.Entity("AppUserArticle", b =>
                {
                    b.Property<int>("DisLikedById")
                        .HasColumnType("int");

                    b.Property<int>("DisLikedPostsId")
                        .HasColumnType("int");

                    b.HasKey("DisLikedById", "DisLikedPostsId");

                    b.HasIndex("DisLikedPostsId");

                    b.ToTable("ArticleDisLikes", (string)null);
                });

            modelBuilder.Entity("AppUserArticle1", b =>
                {
                    b.Property<int>("LikedById")
                        .HasColumnType("int");

                    b.Property<int>("LikedPostsId")
                        .HasColumnType("int");

                    b.HasKey("LikedById", "LikedPostsId");

                    b.HasIndex("LikedPostsId");

                    b.ToTable("ArticleLikes", (string)null);
                });

            modelBuilder.Entity("AppUserArticle2", b =>
                {
                    b.Property<int>("SavedById")
                        .HasColumnType("int");

                    b.Property<int>("SavedPostsId")
                        .HasColumnType("int");

                    b.HasKey("SavedById", "SavedPostsId");

                    b.HasIndex("SavedPostsId");

                    b.ToTable("ArticleSaved", (string)null);
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisLikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.PictureSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("PictureSources");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.PostUtilities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.UserUtilities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Bolivia (Plurinational State of)"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 36,
                            Name = "China"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Democratic People's Republic of Korea"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Democratic Republic of the Congo"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 53,
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 61,
                            Name = "France"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 77,
                            Name = "India"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Iran (Islamic Republic of)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Lao People's Democratic Republic"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Micronesia (Federated States of)"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 116,
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 117,
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 118,
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 119,
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 121,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 122,
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 123,
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 124,
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 125,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 126,
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = 127,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 128,
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 129,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 130,
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 131,
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 132,
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 133,
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 134,
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 135,
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 136,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 137,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 138,
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 139,
                            Name = "Republic of Korea"
                        },
                        new
                        {
                            Id = 140,
                            Name = "Republic of Moldova"
                        },
                        new
                        {
                            Id = 141,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 142,
                            Name = "Russian Federation"
                        },
                        new
                        {
                            Id = 143,
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 144,
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 145,
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 146,
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 147,
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 148,
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 149,
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 150,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 151,
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 152,
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 153,
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 154,
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 155,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 156,
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 157,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 158,
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 159,
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 160,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 161,
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 162,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 163,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 164,
                            Name = "State of Palestine"
                        },
                        new
                        {
                            Id = 165,
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 166,
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 167,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 168,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 169,
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            Id = 170,
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 171,
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 172,
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 173,
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 174,
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 175,
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 176,
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 177,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 178,
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 179,
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 180,
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 181,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 182,
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 183,
                            Name = "United Kingdom of Great Britain and Northern Ireland"
                        },
                        new
                        {
                            Id = 184,
                            Name = "United Republic of Tanzania"
                        },
                        new
                        {
                            Id = 185,
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = 186,
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 187,
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 188,
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 189,
                            Name = "Venezuela (Bolivarian Republic of)"
                        },
                        new
                        {
                            Id = 190,
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 191,
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 192,
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 193,
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.UserUtilities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Users.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Users.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PictureSourceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PictureSourceId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Users.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            Id = 2,
                            GenderName = "Female"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppUserAppUser", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("FollowingsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserArticle", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("DisLikedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("DisLikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserArticle1", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("LikedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserArticle2", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("SavedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("SavedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Article", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Category", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany("Interests")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.PictureSource", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Entities.Article", null)
                        .WithMany("Images")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Tag", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Entities.Article", null)
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.PostUtilities.Comment", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.UserUtilities.Profession", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany("Professions")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Users.AppUser", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.UserUtilities.Country", "County")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Users.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Entities.PictureSource", "PictureSource")
                        .WithMany()
                        .HasForeignKey("PictureSourceId");

                    b.Navigation("County");

                    b.Navigation("Gender");

                    b.Navigation("PictureSource");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ArticleStore.Domain.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ArticleStore.Domain.Models.Users.AppUser", b =>
                {
                    b.Navigation("Interests");

                    b.Navigation("Professions");
                });
#pragma warning restore 612, 618
        }
    }
}
